Let's continue with Step 5: Creating the Unified Inbox UI components.

## **Step 5: Unified Inbox Page & Components**

````tsx
// app/(dashboard)/inbox/page.tsx
'use client'

import { useEffect, useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useAuthStore } from '@/store/useAuthStore'
import { useInboxStore } from '@/store/useInboxStore'
import { trackEvent } from '@/components/analytics/GoogleAnalytics'
import { 
  Inbox,
  Mail,
  Search,
  Filter,
  Archive,
  Star,
  StarOff,
  MoreHorizontal,
  Reply,
  Forward,
  Trash2,
  Eye,
  EyeOff,
  CheckSquare,
  Square,
  MessageSquare,
  Users,
  Calendar,
  Activity,
  Zap,
  Settings,
  Plus,
  ArrowUpRight,
  Clock,
  Send,
  MousePointer,
  Sparkles,
  TrendingUp,
  Globe
} from 'lucide-react'
import Link from 'next/link'
import clsx from 'clsx'

// Theme colors - consistent with dashboard
const THEME_COLORS = {
  primary: '#0f66db',     // Main blue
  success: '#25b43d',     // Green
  secondary: '#6366f1',   // Indigo
  accent: '#059669',      // Emerald
  warning: '#dc2626'      // Red
}

// Message Type Badge Component
const MessageTypeBadge = ({ type }: { type: 'reply' | 'forward' | 'new' }) => {
  const configs = {
    reply: { color: THEME_COLORS.success, icon: Reply, label: 'Reply' },
    forward: { color: THEME_COLORS.secondary, icon: Forward, label: 'Forward' },
    new: { color: THEME_COLORS.accent, icon: Mail, label: 'New' }
  }
  
  const config = configs[type]
  const Icon = config.icon
  
  return (
    <span 
      className="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium text-white"
      style={{ backgroundColor: config.color }}
    >
      <Icon className="h-3 w-3 mr-1" />
      {config.label}
    </span>
  )
}

// Message Card Component
const MessageCard = ({ 
  message, 
  isSelected, 
  onSelect, 
  onToggleRead, 
  onToggleStar, 
  onArchive,
  onReply
}: {
  message: any
  isSelected: boolean
  onSelect: () => void
  onToggleRead: () => void
  onToggleStar: () => void
  onArchive: () => void
  onReply: () => void
}) => {
  const [showActions, setShowActions] = useState(false)
  
  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className={clsx(
        "border rounded-2xl p-6 cursor-pointer transition-all duration-200 hover:shadow-md group",
        message.is_read ? "bg-gray-50 border-gray-200" : "bg-white border-gray-300 shadow-sm",
        isSelected && "ring-2 ring-opacity-50",
        isSelected && { ring: THEME_COLORS.primary }
      )}
      onMouseEnter={() => setShowActions(true)}
      onMouseLeave={() => setShowActions(false)}
    >
      <div className="flex items-start space-x-4">
        <button
          onClick={(e) => {
            e.stopPropagation()
            onSelect()
          }}
          className="mt-1"
        >
          {isSelected ? (
            <CheckSquare className="h-5 w-5" style={{ color: THEME_COLORS.primary }} />
          ) : (
            <Square className="h-5 w-5 text-gray-400 hover:text-gray-600" />
          )}
        </button>

        {/* Message Avatar */}
        <div 
          className="w-12 h-12 rounded-2xl flex items-center justify-center shadow-md"
          style={{ backgroundColor: `${THEME_COLORS.primary}20` }}
        >
          <Mail className="h-6 w-6" style={{ color: THEME_COLORS.primary }} />
        </div>

        {/* Message Content */}
        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between mb-2">
            <div className="flex items-center space-x-3">
              <h3 className={clsx(
                "text-lg font-semibold truncate",
                message.is_read ? "text-gray-700" : "text-gray-900"
              )}>
                {message.from_name || message.from_email}
              </h3>
              <MessageTypeBadge type={message.message_type} />
              {!message.is_read && (
                <div 
                  className="w-2 h-2 rounded-full"
                  style={{ backgroundColor: THEME_COLORS.primary }}
                />
              )}
            </div>
            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-500">
                {new Date(message.received_at).toLocaleDateString()}
              </span>
              <AnimatePresence>
                {showActions && (
                  <motion.div
                    initial={{ opacity: 0, x: 10 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 10 }}
                    className="flex items-center space-x-1"
                  >
                    <button
                      onClick={(e) => {
                        e.stopPropagation()
                        onToggleStar()
                      }}
                      className="p-1 hover:bg-gray-100 rounded-lg transition-colors"
                    >
                      {message.is_starred ? (
                        <Star className="h-4 w-4 text-yellow-500 fill-current" />
                      ) : (
                        <StarOff className="h-4 w-4 text-gray-400" />
                      )}
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation()
                        onToggleRead()
                      }}
                      className="p-1 hover:bg-gray-100 rounded-lg transition-colors"
                    >
                      {message.is_read ? (
                        <EyeOff className="h-4 w-4 text-gray-400" />
                      ) : (
                        <Eye className="h-4 w-4 text-gray-400" />
                      )}
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation()
                        onArchive()
                      }}
                      className="p-1 hover:bg-gray-100 rounded-lg transition-colors"
                    >
                      <Archive className="h-4 w-4 text-gray-400" />
                    </button>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </div>

          <div className="mb-3">
            <h4 className={clsx(
              "text-base font-medium mb-1",
              message.is_read ? "text-gray-600" : "text-gray-900"
            )}>
              {message.subject}
            </h4>
            <p className="text-sm text-gray-600 line-clamp-2">
              {message.content.replace(/<[^>]*>/g, '').substring(0, 150)}...
            </p>
          </div>

          {/* Message Metadata */}
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4 text-xs text-gray-500">
              {message.campaigns && (
                <span className="flex items-center">
                  <MessageSquare className="h-3 w-3 mr-1" />
                  {message.campaigns.name}
                </span>
              )}
              {message.contacts && (
                <span className="flex items-center">
                  <Users className="h-3 w-3 mr-1" />
                  {message.contacts.company || 'No company'}
                </span>
              )}
              {message.confidence_score && (
                <span className="flex items-center">
                  <Sparkles className="h-3 w-3 mr-1" />
                  {Math.round(message.confidence_score * 100)}% confidence
                </span>
              )}
            </div>

            <button
              onClick={(e) => {
                e.stopPropagation()
                onReply()
              }}
              className="inline-flex items-center px-3 py-1.5 text-white rounded-xl hover:shadow-md text-xs font-medium transition-all"
              style={{ backgroundColor: THEME_COLORS.primary }}
            >
              <Reply className="h-3 w-3 mr-1.5" />
              Reply
            </button>
          </div>
        </div>
      </div>
    </motion.div>
  )
}

// Inbox Stats Component
const InboxStats = ({ messages }: { messages: any[] }) => {
  const stats = [
    {
      label: 'Total Messages',
      value: messages.length,
      icon: Mail,
      color: THEME_COLORS.primary
    },
    {
      label: 'Unread',
      value: messages.filter(m => !m.is_read).length,
      icon: Activity,
      color: THEME_COLORS.success
    },
    {
      label: 'Replies',
      value: messages.filter(m => m.message_type === 'reply').length,
      icon: Reply,
      color: THEME_COLORS.secondary
    },
    {
      label: 'Starred',
      value: messages.filter(m => m.is_starred).length,
      icon: Star,
      color: THEME_COLORS.warning
    }
  ]

  return (
    <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
      {stats.map((stat, index) => {
        const Icon = stat.icon
        return (
          <motion.div
            key={stat.label}
            className="bg-white rounded-2xl border border-gray-200 shadow-lg hover:shadow-xl transition-all duration-300 p-6 group hover:scale-105"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <div className="flex items-center justify-between mb-4">
              <div 
                className="w-14 h-14 rounded-2xl flex items-center justify-center shadow-md group-hover:scale-110 transition-transform duration-200"
                style={{ backgroundColor: stat.color }}
              >
                <Icon className="h-7 w-7 text-white" />
              </div>
            </div>
            <h3 className="text-sm font-semibold text-gray-500 mb-2 uppercase tracking-wider">{stat.label}</h3>
            <p className="text-3xl font-bold text-gray-900">{stat.value}</p>
          </motion.div>
        )
      })}
    </div>
  )
}

export default function InboxPage() {
  const { user } = useAuthStore()
  const {
    messages,
    loading,
    filter,
    selectedMessages,
    currentView,
    fetchMessages,
    setFilter,
    setCurrentView,
    toggleMessageSelection,
    clearSelection,
    selectAll,
    markAsRead,
    archiveMessages,
    subscribeToRealtime,
    unsubscribeFromRealtime
  } = useInboxStore()

  const [searchQuery, setSearchQuery] = useState('')
  const [showFilters, setShowFilters] = useState(false)

  useEffect(() => {
    if (user?.organization_id) {
      fetchMessages(user.organization_id)
      subscribeToRealtime(user.organization_id)
      
      // Track page view
      trackEvent('page_view', 'inbox', 'inbox_page')
    }

    return () => {
      unsubscribeFromRealtime()
    }
  }, [user?.organization_id, fetchMessages, subscribeToRealtime, unsubscribeFromRealtime])

  const handleBulkAction = async (action: 'read' | 'archive' | 'star') => {
    if (selectedMessages.length === 0) return
    
    try {
      if (action === 'read') {
        await markAsRead(selectedMessages, user!.organization_id)
        trackEvent('bulk_action', 'inbox', 'mark_read', selectedMessages.length)
      } else if (action === 'archive') {
        await archiveMessages(selectedMessages, user!.organization_id)
        trackEvent('bulk_action', 'inbox', 'archive', selectedMessages.length)
      }
      
      clearSelection()
    } catch (error) {
      console.error(`Failed to ${action} messages:`, error)
    }
  }

  const handleReply = (message: any) => {
    // Track reply action
    trackEvent('reply_click', 'inbox', message.id)
    
    // TODO: Implement reply functionality in Milestone 2
    console.log('Reply to message:', message.id)
    alert('Reply functionality will be available in the next update!')
  }

  const filteredMessages = messages.filter(message => {
    if (searchQuery) {
      const query = searchQuery.toLowerCase()
      return (
        message.subject.toLowerCase().includes(query) ||
        message.content.toLowerCase().includes(query) ||
        message.from_email.toLowerCase().includes(query) ||
        message.from_name?.toLowerCase().includes(query)
      )
    }
    return true
  })

  const filterOptions = [
    { value: 'all', label: 'All Messages', icon: Mail },
    { value: 'unread', label: 'Unread', icon: Activity },
    { value: 'starred', label: 'Starred', icon: Star },
    { value: 'archived', label: 'Archived', icon: Archive }
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-full mx-auto px-6 py-6">
        <div className="space-y-8">
          {/* Header */}
          <motion.div 
            className="flex items-center justify-between"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Unified Inbox</h1>
              <p className="mt-1 text-lg text-gray-600">
                Manage all your email replies and conversations in one place
              </p>
            </div>
            
            <div className="flex items-center space-x-4">
              <Link
                href="/campaigns/create"
                className="inline-flex items-center px-6 py-3 border border-gray-300 text-sm font-medium rounded-xl text-gray-700 bg-white hover:bg-gray-50 hover:shadow-md transition-all duration-200"
              >
                <Plus className="h-4 w-4 mr-2" />
                New Campaign
              </Link>
              <button
                className="inline-flex items-center px-8 py-3 border border-transparent text-sm font-semibold rounded-xl text-white hover:shadow-lg transition-all duration-200"
                style={{ backgroundColor: THEME_COLORS.primary }}
                onClick={() => {
                  if (user?.organization_id) {
                    fetchMessages(user.organization_id)
                  }
                }}
              >
                <Activity className="h-4 w-4 mr-2" />
                Refresh
              </button>
            </div>
          </motion.div>

          {/* Stats */}
          <InboxStats messages={messages} />

          {/* Filters and Controls */}
          <motion.div 
            className="bg-white rounded-2xl border border-gray-200 shadow-lg p-6"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
          >
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6">
              <div className="flex flex-col sm:flex-row gap-4 flex-1">
                <div className="flex-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Search messages..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:border-transparent text-gray-900 placeholder-gray-500 transition-all duration-200 shadow-sm"
                      style={{ 
                        '--tw-ring-color': THEME_COLORS.primary
                      } as any}
                    />
                  </div>
                </div>
                
                <div className="flex items-center space-x-3">
                  {filterOptions.map((option) => {
                    const Icon = option.icon
                    return (
                      <button
                        key={option.value}
                        onClick={() => setFilter(option.value as any)}
                        className={clsx(
                          "inline-flex items-center px-4 py-2 rounded-xl text-sm font-medium transition-all",
                          filter === option.value
                            ? "text-white shadow-md"
                            : "text-gray-600 bg-gray-100 hover:bg-gray-200"
                        )}
                        style={filter === option.value ? { backgroundColor: THEME_COLORS.primary } : {}}
                      >
                        <Icon className="h-4 w-4 mr-2" />
                        {option.label}
                      </button>
                    )
                  })}
                </div>
              </div>
            </div>

            {/* Bulk Actions */}
            {selectedMessages.length > 0 && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                className="flex items-center justify-between p-4 bg-gray-50 rounded-xl mb-4"
              >
                <span className="text-sm text-gray-600">
                  {selectedMessages.length} message{selectedMessages.length !== 1 ? 's' : ''} selected
                </span>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => handleBulkAction('read')}
                    className="inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
                  >
                    <Eye className="h-4 w-4 mr-1" />
                    Mark Read
                  </button>
                  <button
                    onClick={() => handleBulkAction('archive')}
                    className="inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
                  >
                    <Archive className="h-4 w-4 mr-1" />
                    Archive
                  </button>
                  <button
                    onClick={clearSelection}
                    className="inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
                  >
                    Clear
                  </button>
                </div>
              </motion.div>
            )}
          </motion.div>

          {/* Messages List */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
          >
            {loading && messages.length === 0 ? (
              <div className="flex items-center justify-center h-64">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2" style={{ borderColor: THEME_COLORS.primary }}></div>
              </div>
            ) : filteredMessages.length === 0 ? (
              <div className="bg-white rounded-2xl border border-gray-200 shadow-lg p-12 text-center">
                <div 
                  className="w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-md"
                  style={{ backgroundColor: `${THEME_COLORS.primary}20` }}
                >
                  <Inbox className="h-8 w-8" style={{ color: THEME_COLORS.primary }} />
                </div>
                <h3 className="text-2xl font-bold text-gray-900 mb-2">
                  {searchQuery ? 'No messages found' : 'Your inbox is empty'}
                </h3>
                <p className="text-gray-600 mb-6 text-lg">
                  {searchQuery 
                    ? 'Try adjusting your search terms or filters.'
                    : 'Email replies from your campaigns will appear here automatically.'
                  }
                </p>
                {!searchQuery && (
                  <Link
                    href="/campaigns/create"
                    className="inline-flex items-center px-8 py-3 border border-transparent text-sm font-semibold rounded-xl text-white hover:shadow-lg transition-all duration-200"
                    style={{ backgroundColor: THEME_COLORS.primary }}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Create Your First Campaign
                  </Link>
                )}
              </div>
            ) : (
              <div className="space-y-4">
                <AnimatePresence>
                  {filteredMessages.map((message) => (
                    <MessageCard
                      key={message.id}
                      message={message}
                      isSelected={selectedMessages.includes(message.id)}
                      onSelect={() => toggleMessageSelection(message.id)}
                      onToggleRead={() => markAsRead([message.id], user!.organization_id)}
                      onToggleStar={() => {
                        // TODO: Implement toggle star functionality
                        console.log('Toggle star:', message.id)
                      }}
                      onArchive={() => archiveMessages([message.id], user!.organization_id)}
                      onReply={() => handleReply(message)}
                    />
                  ))}
                </AnimatePresence>
              </div>
            )}
          </motion.div>
        </div>
      </div>
    </div>
  )
}
````

## **Step 6: Update Resend Webhook for Reply Detection**

````typescript
// app/api/webhooks/resend/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { EmailService } from '@/lib/email-service'
import { ReplyDetectionService } from '@/lib/reply-detection'
import { Webhook } from 'svix'

export async function POST(request: NextRequest) {
  try {
    const payload = await request.text() 
    
    // Get Svix headers
    const svixId = request.headers.get('svix-id') || ''
    const svixTimestamp = request.headers.get('svix-timestamp') || ''
    const svixSignature = request.headers.get('svix-signature') || ''

    console.log('Svix webhook received:', {
      payloadLength: payload.length,
      svixId,
      svixTimestamp,
      signature: svixSignature ? svixSignature.substring(0, 30) + '...' : 'none',
      userAgent: request.headers.get('user-agent')
    })

    // Verify webhook signature using Svix library
    if (!process.env.RESEND_WEBHOOK_SECRET) {
      console.warn('RESEND_WEBHOOK_SECRET not configured, skipping signature verification')
    } else {
      try {
        const wh = new Webhook(process.env.RESEND_WEBHOOK_SECRET)
        
        // Verify the webhook - this will throw if verification fails
        wh.verify(payload, {
          'svix-id': svixId,
          'svix-timestamp': svixTimestamp,
          'svix-signature': svixSignature,
        })
        
        console.log('✅ Webhook signature verified with Svix library')
      } catch (verificationError) {
        console.error('Webhook signature verification failed:', verificationError)
        return NextResponse.json({ error: 'Invalid signature' }, { status: 401 })
      }
    }

    const event = JSON.parse(payload)
    console.log('Resend webhook event:', {
      type: event.type,
      messageId: event.data?.id,
      to: event.data?.to,
      subject: event.data?.subject,
      tags: event.data?.tags
    })
    
    // Extract tags correctly (tags is an object, not an array)
    const tags = event.data?.tags || {}
    const campaignId = tags.campaign_id
    const contactId = tags.contact_id
    const stepNumber = parseInt(tags.step_number || '1')

    console.log('Extracted from tags:', { campaignId, contactId, stepNumber, tagsType: typeof tags })

    if (!campaignId || !contactId) {
      console.warn('Missing campaign or contact ID in webhook event:', { 
        campaignId, 
        contactId, 
        availableTags: Object.keys(tags)
      })
      return NextResponse.json({ received: true, warning: 'Missing required tags' })
    }

    console.log('Processing webhook for:', { campaignId, contactId, stepNumber, eventType: event.type })

    // Handle different event types
    switch (event.type) {
      case 'email.sent':
        await EmailService.logEmailEvent({
          campaignId,
          contactId, 
          stepNumber,
          type: 'sent',
          messageId: event.data?.email_id,
          metadata: {
            to: event.data?.to,
            subject: event.data?.subject,
            from: event.data?.from,
            sentAt: event.data?.created_at || event.created_at
          }
        })
        console.log('✅ Logged email sent event')
        break

      case 'email.delivered':
        await EmailService.logEmailEvent({
          campaignId,
          contactId,
          stepNumber,
          type: 'delivery',
          messageId: event.data?.email_id,
          metadata: {
            to: event.data?.to,
            subject: event.data?.subject,
            from: event.data?.from,
            deliveredAt: event.data?.created_at || event.created_at
          }
        })
        console.log('✅ Logged email delivery event')
        break

      case 'email.bounced':
        await EmailService.logEmailEvent({
          campaignId,
          contactId,
          stepNumber,
          type: 'bounce',
          messageId: event.data?.id,
          metadata: {
            reason: event.data?.bounce?.reason,
            bounceType: event.data?.bounce?.type,
            diagnostic: event.data?.bounce?.diagnostic
          }
        })
        console.log('✅ Logged email bounce event')
        break

      case 'email.complained':
        await EmailService.logEmailEvent({
          campaignId,
          contactId,
          stepNumber,
          type: 'complaint',
          messageId: event.data?.id,
          metadata: {
            complaintType: event.data?.complaint?.type,
            userAgent: event.data?.complaint?.userAgent
          }
        })
        console.log('✅ Logged email complaint event')
        break

      case 'email.opened':
        await EmailService.logEmailEvent({
          campaignId,
          contactId,
          stepNumber,
          type: 'open',
          messageId: event.data?.id,
          metadata: {
            openedAt: event.created_at,
            userAgent: event.data?.userAgent,
            ip: event.data?.ip
          }
        })
        console.log('✅ Logged email open event')
        break

      case 'email.clicked':
        await EmailService.logEmailEvent({
          campaignId,
          contactId,
          stepNumber,
          type: 'click',
          messageId: event.data?.id,
          metadata: {
            clickedAt: event.created_at,
            url: event.data?.url,
            userAgent: event.data?.userAgent,
            ip: event.data?.ip
          }
        })
        console.log('✅ Logged email click event')
        break

      // *** NEW: Handle incoming replies ***
      case 'email.received':
        try {
          // Get organization ID from campaign
          const { data: campaign } = await supabase
            .from('campaigns')
            .select('organization_id')
            .eq('id', campaignId)
            .single()

          if (campaign) {
            // Process incoming email as potential reply
            await ReplyDetectionService.processIncomingEmail({
              message_id: event.data?.id,
              subject: event.data?.subject || 'No subject',
              content: event.data?.text || event.data?.html || 'No content',
              html_content: event.data?.html,
              from_email: event.data?.from?.email || event.data?.from,
              from_name: event.data?.from?.name,
              to_email: event.data?.to?.email || event.data?.to,
              to_name: event.data?.to?.name,
              headers: event.data?.headers,
              received_at: event.created_at
            }, campaign.organization_id)
            
            console.log('✅ Processed incoming email as potential reply')
          }
        } catch (error) {
          console.error('Failed to process incoming email:', error)
        }
        break

      default:
        console.log('Unhandled Resend webhook event type:', event.type)
    }

    return NextResponse.json({ 
      received: true, 
      eventType: event.type,
      messageId: event.data?.id,
      campaignId,
      contactId,
      svixId
    })

  } catch (error) {
    console.error('Resend webhook processing error:', error)
    return NextResponse.json({ 
      error: 'Webhook processing failed',
      details: error instanceof Error ? error.message : 'Unknown error' 
    }, { status: 500 })
  }
}
````

## **Step 7: Add Google Analytics Environment Variable**

````bash
# .env.local
# ... existing variables ...

# Google Analytics 
NEXT_PUBLIC_GA_MEASUREMENT_ID=G-XXXXXXXXXX
````

## **Step 8: Create Supabase RPC Function for Thread Message Count**

````sql
-- supabase/migrations/20240101000002_rpc_functions.sql
-- RPC function to increment thread message count
CREATE OR REPLACE FUNCTION increment_thread_message_count(thread_id UUID)
RETURNS void AS $$
BEGIN
  UPDATE email_threads 
  SET message_count = message_count + 1,
      updated_at = NOW()
  WHERE id = thread_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant permissions
GRANT EXECUTE ON FUNCTION increment_thread_message_count(UUID) TO authenticated;
````

## **Summary of Milestone 1 Implementation**

✅ **Google Analytics Integration**
- Complete GA4 setup with custom event tracking
- Campaign and email event tracking
- Page view tracking for all dashboard pages

✅ **Database Schema**
- `inbox_messages` table for unified inbox
- `email_threads` table for conversation grouping
- `reply_patterns` table for detection rules
- Proper RLS policies and indexes

✅ **Reply Detection Service**
- Smart pattern-based reply detection
- Thread management and message grouping
- Campaign/contact matching
- Confidence scoring system

✅ **Unified Inbox Store**
- Zustand store for inbox state management
- Message filtering and pagination
- Bulk operations (read, archive, star)
- Real-time update hooks

✅ **Unified Inbox UI**
- Complete inbox interface with message cards
- Advanced filtering and search
- Bulk selection and actions
- Responsive design with animations

✅ **Enhanced Webhook Processing**
- Reply detection integration
- Automatic inbox message creation
- Thread management

**Milestone 1 Complete!** The unified inbox system is now ready with reply detection and Google Analytics tracking. 

Should we proceed to **Milestone 2: AI Reply Classification**? 🚀